package com.twitter.flocktest;

import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.Vector;

import com.google.common.collect.ImmutableList;
import com.yahoo.ycsb.Client;
import com.yahoo.ycsb.DB;
import com.yahoo.ycsb.DBException;
import com.yahoo.ycsb.generator.IntegerGenerator;
import com.yahoo.ycsb.generator.UniformIntegerGenerator;

import com.twitter.common.collections.Pair;
import com.twitter.common.thrift.ThriftException;
import com.twitter.flock.client.FlockClient;
import com.twitter.flock.client.FlockClientImpl;
import com.twitter.flockdb.thrift.Priority;

/**
 * Flock DB plugin for YCSB.
 *
 *
 *
 * We map YCSB operations to Flock operations as follows:
 * insert: add a new user with FLOCK_FOLLOWS_PER_USER edges
 * update: add a random edge to an existing user
 * delete: remove a random edge from an existing user
 * read: retrieve the set of followings for a user
 * scan: not supported
 *
 * Note that this class makes assumptions on the key names that are generated by
 * CoreWorkload -- record keys are asuumed to have the format "userN", where 0 <= N < recordcount.
 *
 * @author John Corwin
 */
public class FlockDBClient extends DB {
  enum FlockReturnCode {
    SUCCESS(0),
    FAILED(-1),
    UNSUPPORTED(-2);

    private int code;

    public int getCode() {
      return code;
    }

    private FlockReturnCode(int code) {
      this.code = code;
    }
  }

  private static final int FLOCK_PORT = 6915;
  private static final String FLOCK_HOSTS = "flock.hosts";
  private static final String DEFAULT_FLOCK_HOST = "localhost";
  private static final String FLOCK_MAX_CONNECTIONS_PER_HOST = "flock.max_connections_per_host";
  private static final int DEFAULT_MAX_CONNECTIONS_PER_HOST = 5;
  private static final String FLOCK_FOLLOWS_PER_USER = "flock.follows_per_user";
  private static final int DEFAULT_FOLLOWS_PER_USER = 100;
  private static final String FLOCK_INITIAL_FOLLOWS_PER_USER = "flock.initial_follows_per_user";
  private static final int DEFAULT_INITIAL_FOLLOWS_PER_USER = 25;

  private FlockClient flockClient;
  private int numUsers;
  private int initialFollowsPerUser;
  private IntegerGenerator followChooser;
  private boolean initialized = false;

  @Override
  public void init() throws DBException {
    if (initialized) {
      System.err.println("Flock client connection already initialized.");
      return;
    }
    Properties props = getProperties();
    String flockHosts = props.getProperty(FLOCK_HOSTS, DEFAULT_FLOCK_HOST);
    int maxConnectionsPerHost = Integer.valueOf(props.getProperty(FLOCK_MAX_CONNECTIONS_PER_HOST,
        String.valueOf(DEFAULT_MAX_CONNECTIONS_PER_HOST)));
    ImmutableList.Builder<InetSocketAddress> socketAddrs = ImmutableList.builder();
    for (String flappHost : flockHosts.split(",")) {
      socketAddrs.add(InetSocketAddress.createUnresolved(flappHost, FLOCK_PORT));
    }
    flockClient = new FlockClientImpl(FlockClientImpl.DEFAULT_CONFIG, socketAddrs.build(),
        maxConnectionsPerHost);
    numUsers = Integer.parseInt(props.getProperty(Client.RECORD_COUNT_PROPERTY));
    int targetFollowsPerUser = Integer.parseInt(props.getProperty(FLOCK_FOLLOWS_PER_USER,
        String.valueOf(DEFAULT_FOLLOWS_PER_USER)));
    initialFollowsPerUser = Integer.parseInt(props.getProperty(FLOCK_INITIAL_FOLLOWS_PER_USER,
        String.valueOf(DEFAULT_INITIAL_FOLLOWS_PER_USER)));
    followChooser = new UniformIntegerGenerator(0, targetFollowsPerUser - 1);
    initialized = true;
  }

  @Override
  public int read(String table, String key, Set<String> fields, HashMap<String, String> result) {
    long userId = getUserIdFromKey(key);
    try {
      flockClient.getFollowings(userId);
      return FlockReturnCode.SUCCESS.getCode();
    } catch (ThriftException e) {
      e.printStackTrace();
      return FlockReturnCode.FAILED.getCode();
    }
  }

  @Override
  public int scan(String table, String startkey, int recordcount, Set<String> fields,
      Vector<HashMap<String, String>> result) {
    return FlockReturnCode.UNSUPPORTED.getCode();
  }

  @Override
  public int update(String table, String key, HashMap<String, String> values) {
    long userId = getUserIdFromKey(key);
    long followingId = nextFollowId(userId);
    try {
      flockClient.addEdge(FlockClient.Graph.Follows, userId, followingId);
      return FlockReturnCode.SUCCESS.getCode();
    } catch (ThriftException e) {
      e.printStackTrace();
      return FlockReturnCode.FAILED.getCode();
    }
  }

  @Override
  public int insert(String table, String key, HashMap<String, String> values) {
    long userId = getUserIdFromKey(key);
    List<Pair<Long, Long>> edges = new ArrayList<Pair<Long, Long>>(initialFollowsPerUser);
    for (int i = 0; i < initialFollowsPerUser; i++) {
      long followerId = nextFollowId(userId);
      edges.add(Pair.of(userId, followerId));
    }
    try {
      flockClient.addEdges(FlockClient.Graph.Follows, Priority.High, edges);
      return FlockReturnCode.SUCCESS.getCode();
    } catch (ThriftException e) {
      e.printStackTrace();
      return FlockReturnCode.FAILED.getCode();
    }
  }

  @Override
  public int delete(String table, String key) {
    long userId = getUserIdFromKey(key);
    long followingId = nextFollowId(userId);
    try {
      flockClient.removeEdge(FlockClient.Graph.Follows, userId, followingId);
      return FlockReturnCode.SUCCESS.getCode();
    } catch (ThriftException e) {
      e.printStackTrace();
      return FlockReturnCode.FAILED.getCode();
    }
  }

  private long getUserIdFromKey(String key) {
    return Long.valueOf(key.substring("user".length()));
  }

  private long nextFollowId(long userId) {
    long followSlot = followChooser.nextInt();
    return String.valueOf(userId * (followSlot + 2)).hashCode() % numUsers;
  }
}
